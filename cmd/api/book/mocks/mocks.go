// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/books-service/cmd/api/book (interfaces: Repository,Notifier)
//
// Generated by this command:
//
//	mockgen.exe -destination ./mocks/mocks.go -package book . Repository,Notifier
//
// Package book is a generated GoMock package.
package book

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	book "github.com/books-service/cmd/api/book"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddItemToOrder mocks base method.
func (m *MockRepository) AddItemToOrder(arg0 context.Context, arg1 book.OrderItem, arg2 uuid.UUID) (book.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(book.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemToOrder indicates an expected call of AddItemToOrder.
func (mr *MockRepositoryMockRecorder) AddItemToOrder(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToOrder", reflect.TypeOf((*MockRepository)(nil).AddItemToOrder), arg0, arg1, arg2)
}

// BeginTx mocks base method.
func (m *MockRepository) BeginTx(arg0 context.Context, arg1 *sql.TxOptions) (book.Repository, *sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(book.Repository)
	ret1, _ := ret[1].(*sql.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockRepositoryMockRecorder) BeginTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRepository)(nil).BeginTx), arg0, arg1)
}

// CreateBook mocks base method.
func (m *MockRepository) CreateBook(arg0 context.Context, arg1 book.Book) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockRepositoryMockRecorder) CreateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockRepository)(nil).CreateBook), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(arg0 context.Context, arg1 book.Order) (book.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(book.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), arg0, arg1)
}

// DeleteBookAtOrder mocks base method.
func (m *MockRepository) DeleteBookAtOrder(arg0 context.Context, arg1 book.UpdateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookAtOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookAtOrder indicates an expected call of DeleteBookAtOrder.
func (mr *MockRepositoryMockRecorder) DeleteBookAtOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookAtOrder", reflect.TypeOf((*MockRepository)(nil).DeleteBookAtOrder), arg0, arg1)
}

// GetBookByID mocks base method.
func (m *MockRepository) GetBookByID(arg0 context.Context, arg1 uuid.UUID) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", arg0, arg1)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockRepositoryMockRecorder) GetBookByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockRepository)(nil).GetBookByID), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockRepository) ListBooks(arg0 context.Context, arg1 string, arg2, arg3 float32, arg4, arg5 string, arg6 bool, arg7, arg8 int) ([]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockRepositoryMockRecorder) ListBooks(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockRepository)(nil).ListBooks), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// ListBooksTotals mocks base method.
func (m *MockRepository) ListBooksTotals(arg0 context.Context, arg1 string, arg2, arg3 float32, arg4 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooksTotals", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooksTotals indicates an expected call of ListBooksTotals.
func (mr *MockRepositoryMockRecorder) ListBooksTotals(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooksTotals", reflect.TypeOf((*MockRepository)(nil).ListBooksTotals), arg0, arg1, arg2, arg3, arg4)
}

// ListOrderItems mocks base method.
func (m *MockRepository) ListOrderItems(arg0 context.Context, arg1 uuid.UUID) (book.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderItems", arg0, arg1)
	ret0, _ := ret[0].(book.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderItems indicates an expected call of ListOrderItems.
func (mr *MockRepositoryMockRecorder) ListOrderItems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderItems", reflect.TypeOf((*MockRepository)(nil).ListOrderItems), arg0, arg1)
}

// SetBookArchiveStatus mocks base method.
func (m *MockRepository) SetBookArchiveStatus(arg0 context.Context, arg1 uuid.UUID, arg2 bool) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBookArchiveStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBookArchiveStatus indicates an expected call of SetBookArchiveStatus.
func (mr *MockRepositoryMockRecorder) SetBookArchiveStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBookArchiveStatus", reflect.TypeOf((*MockRepository)(nil).SetBookArchiveStatus), arg0, arg1, arg2)
}

// UpdateBook mocks base method.
func (m *MockRepository) UpdateBook(arg0 context.Context, arg1 book.Book) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockRepositoryMockRecorder) UpdateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockRepository)(nil).UpdateBook), arg0, arg1)
}

// UpdateBookAtOrder mocks base method.
func (m *MockRepository) UpdateBookAtOrder(arg0 context.Context, arg1 book.UpdateOrderRequest) (book.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookAtOrder", arg0, arg1)
	ret0, _ := ret[0].(book.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookAtOrder indicates an expected call of UpdateBookAtOrder.
func (mr *MockRepositoryMockRecorder) UpdateBookAtOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookAtOrder", reflect.TypeOf((*MockRepository)(nil).UpdateBookAtOrder), arg0, arg1)
}

// UpdateOrderRow mocks base method.
func (m *MockRepository) UpdateOrderRow(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderRow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderRow indicates an expected call of UpdateOrderRow.
func (mr *MockRepositoryMockRecorder) UpdateOrderRow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderRow", reflect.TypeOf((*MockRepository)(nil).UpdateOrderRow), arg0, arg1)
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// BookCreated mocks base method.
func (m *MockNotifier) BookCreated(arg0 context.Context, arg1 book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookCreated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BookCreated indicates an expected call of BookCreated.
func (mr *MockNotifierMockRecorder) BookCreated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookCreated", reflect.TypeOf((*MockNotifier)(nil).BookCreated), arg0, arg1)
}

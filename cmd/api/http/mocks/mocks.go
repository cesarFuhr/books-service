// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/books-service/cmd/api/book (interfaces: ServiceAPI)
//
// Generated by this command:
//
//	mockgen.exe -destination B:/dev/books/books-service/cmd/api/http/mocks/mocks.go -package http . ServiceAPI
//
// Package http is a generated GoMock package.
package http

import (
	reflect "reflect"

	book "github.com/books-service/cmd/api/book"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceAPI is a mock of ServiceAPI interface.
type MockServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAPIMockRecorder
}

// MockServiceAPIMockRecorder is the mock recorder for MockServiceAPI.
type MockServiceAPIMockRecorder struct {
	mock *MockServiceAPI
}

// NewMockServiceAPI creates a new mock instance.
func NewMockServiceAPI(ctrl *gomock.Controller) *MockServiceAPI {
	mock := &MockServiceAPI{ctrl: ctrl}
	mock.recorder = &MockServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAPI) EXPECT() *MockServiceAPIMockRecorder {
	return m.recorder
}

// ArchiveBook mocks base method.
func (m *MockServiceAPI) ArchiveBook(arg0 uuid.UUID) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveBook", arg0)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveBook indicates an expected call of ArchiveBook.
func (mr *MockServiceAPIMockRecorder) ArchiveBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveBook", reflect.TypeOf((*MockServiceAPI)(nil).ArchiveBook), arg0)
}

// CreateBook mocks base method.
func (m *MockServiceAPI) CreateBook(arg0 book.CreateBookRequest) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockServiceAPIMockRecorder) CreateBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockServiceAPI)(nil).CreateBook), arg0)
}

// GetBook mocks base method.
func (m *MockServiceAPI) GetBook(arg0 uuid.UUID) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockServiceAPIMockRecorder) GetBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockServiceAPI)(nil).GetBook), arg0)
}

// ListBooks mocks base method.
func (m *MockServiceAPI) ListBooks(arg0 book.ListBooksRequest) (book.PagedBooks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0)
	ret0, _ := ret[0].(book.PagedBooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockServiceAPIMockRecorder) ListBooks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockServiceAPI)(nil).ListBooks), arg0)
}

// UpdateBook mocks base method.
func (m *MockServiceAPI) UpdateBook(arg0 book.UpdateBookRequest) (book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockServiceAPIMockRecorder) UpdateBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockServiceAPI)(nil).UpdateBook), arg0)
}
